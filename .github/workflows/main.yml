name: Go Build & Test

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:

#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4.2.2

#     - name: Set up Go
#       uses: actions/setup-go@v5.5.0
#       with:
#         go-version: 1.24

#     - name: Install libpcap-dev
#       run: sudo apt-get install -y libpcap-dev make

#     - name: Build
#       run: |
#           export $(cat .env | xargs)
#           export IMAGE=fedora_nmap
#           export CONTAINER_NAME=discovr_nmap
#           export NMAP_WIN_ZIP=nmap-$NMAP_VERSION-win32.zip
#           docker buildx build -f nmap.Dockerfile . --tag $IMAGE --build-arg FEDORA_PACKAGE
#           docker create --name $CONTAINER_NAME $IMAGE
#           docker wait $CONTAINER_NAME
#           docker cp $CONTAINER_NAME:/usr/bin/nmap assets/nmap
#           docker rm -v $CONTAINER_NAME
#           wget https://nmap.org/dist/$NMAP_WIN_ZIP -O assets/$NMAP_WIN_ZIP
#           go build -ldflags="-X 'github.com/Naman1997/discovr/internal.NmapVersion=$NMAP_VERSION'" -v

#     - name: Test
#       run: go test -v ./...

on:
  push:
    tags:
      - 'v*.*.*'    # Match version tags
  workflow_dispatch:      

jobs:
  build:
    name: ${{ matrix.os.pretty }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      matrix:
        os:
          - name: darwin
            runs-on: [macos-latest]
            pretty: üçé macOS
          - name: linux
            runs-on: [ubuntu-latest]
            pretty: üêß Linux
          - name: windows
            runs-on: [windows-latest]
            pretty: ü™ü Windows
            output: discovr.exe
        arch: [amd64, arm64]
        go: [1.24.x]
        exclude:
          - os:
              name: darwin
            arch: amd64
          # Linux ARM64 images are not yet publicly available (https://github.com/actions/runner-images)
          - os:
              name: linux
            arch: arm64
          - os:
              name: windows
            arch: arm64

    env:
      OUTPUT: ${{ matrix.os.output || 'discovr' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Install Dependencies
      if: ${{ matrix.os.name == 'linux' }}
      run: sudo apt-get update && sudo apt-get install -y p7zip-full libpcap-dev libnetfilter-queue-dev libusb-1.0-0-dev

    - name: Install Dependencies (macOS)
      if: ${{ matrix.os.name == 'macos' }}
      run: brew install libpcap libusb p7zip

    - name: Install libusb via mingw (Windows)
      if: ${{ matrix.os.name == 'windows' }}
      uses: msys2/setup-msys2@v2
      with:
        install: |-
          mingw64/mingw-w64-x86_64-libusb
          mingw64/mingw-w64-x86_64-pkg-config

    - name: Install other Dependencies (Windows)
      if: ${{ matrix.os.name == 'windows' }}
      run: |
        choco install openssl.light -y
        choco install make -y
        choco install 7zip -y
        choco install zadig -y
        curl -L "https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip" -o "C:\wpcap-sdk.zip"
        7z x -y "C:\wpcap-sdk.zip" -o"C:\winpcap"
        echo "D:\a\_temp\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Build
      run: make -e TARGET="${{ env.OUTPUT }}"

    - name: Verify Build
      run: |
        file "${{ env.OUTPUT }}"
        openssl dgst -sha256 "${{ env.OUTPUT }}" | tee discovr_${{ matrix.os.name }}_${{ matrix.arch }}.sha256
        7z a "discovr_${{ matrix.os.name }}_${{ matrix.arch }}.zip" "${{ env.OUTPUT }}" "discovr_${{ matrix.os.name }}_${{ matrix.arch }}.sha256"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ matrix.os.name }}-${{ matrix.arch }}
        path: |
          discovr_*.zip
          discovr_*.sha256

  deploy:
    needs: [build]
    name: Release
    runs-on: ubuntu-latest
    steps:
        - name: Download Artifacts
          uses: actions/download-artifact@v5
          with:
            pattern: release-artifacts-*
            merge-multiple: true
            path: dist/

        - name: Release Assets
          run: ls -l dist

        - name: Upload Release Assets
          uses: softprops/action-gh-release@v2
          if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
          with:
            files: dist/discovr_*
    env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}